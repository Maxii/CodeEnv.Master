// --------------------------------------------------------------------------------------------------------------------
// <copyright>
// Copyright © 2012 - 2015 Strategic Forge
//
// Email: jim@strategicforge.com
// </copyright> 
// <summary> 
// File: ShipHullStat.cs
// Immutable stat containing externally acquirable hull values for Ships.
// </summary> 
// -------------------------------------------------------------------------------------------------------------------- 

////#define DEBUG_LOG
////#define DEBUG_WARN
////#define DEBUG_ERROR

namespace CodeEnv.Master.GameContent {

    using CodeEnv.Master.Common;
    using UnityEngine;

    /// <summary>
    /// Immutable stat containing externally acquirable hull values for Ships.
    /// <remarks>Implements value-based Equality and HashCode.</remarks>
    /// </summary>
    public class ShipHullStat : AHullStat {

        #region Comparison Operators Override

        // see C# 4.0 In a Nutshell, page 254

        public static bool operator ==(ShipHullStat left, ShipHullStat right) {
            // https://msdn.microsoft.com/en-us/library/ms173147(v=vs.90).aspx
            if (ReferenceEquals(left, right)) { return true; }
            if (((object)left == null) || ((object)right == null)) { return false; }
            return left.Equals(right);
        }

        public static bool operator !=(ShipHullStat left, ShipHullStat right) {
            return !(left == right);
        }

        #endregion

        public ShipHullCategory HullCategory { get; private set; }

        /// <summary>
        /// The drag of this hull in Topography.OpenSpace.
        /// </summary>
        public float Drag { get; private set; }
        public float Income { get; private set; }
        public float Science { get; private set; }
        public float Culture { get; private set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipHullStat" /> class.
        /// </summary>
        /// <param name="hullCategory">The category.</param>
        /// <param name="imageAtlasID">The image atlas identifier.</param>
        /// <param name="imageFilename">The image filename.</param>
        /// <param name="description">The description.</param>
        /// <param name="size">The size.</param>
        /// <param name="mass">The mass.</param>
        /// <param name="drag">The drag of this hull in Topography.OpenSpace.</param>
        /// <param name="pwrRqmt">The PWR RQMT.</param>
        /// <param name="constructionCost">The production cost.</param>
        /// <param name="expense">The expense.</param>
        /// <param name="maxHitPts">The maximum hit PTS.</param>
        /// <param name="damageMitigation">The damage mitigation.</param>
        /// <param name="hullDimensions">The hull dimensions.</param>
        /// <param name="refitBenefit">The refit benefit.</param>
        /// <param name="science">The science generated by this hull, if any.</param>
        /// <param name="culture">The culture generated by this hull, if any.</param>
        /// <param name="income">The income generated by this hull, if any.</param>
        public ShipHullStat(ShipHullCategory hullCategory, AtlasID imageAtlasID, string imageFilename, string description, float size,
            float mass, float drag, float pwrRqmt, float constructionCost, float expense, float maxHitPts, DamageStrength damageMitigation,
            Vector3 hullDimensions, int refitBenefit, float science, float culture, float income)
            : base(hullCategory.GetValueName(), imageAtlasID, imageFilename, description, size, mass, pwrRqmt, constructionCost, expense,
                  maxHitPts, damageMitigation, hullDimensions, refitBenefit) {
            HullCategory = hullCategory;
            Drag = drag;
            Science = science;
            Culture = culture;
            Income = income;
        }

        #region Object.Equals and GetHashCode Override

        public override int GetHashCode() {
            unchecked {
                int hash = base.GetHashCode();
                hash = hash * 31 + HullCategory.GetHashCode(); // 31 = another prime number
                hash = hash * 31 + Drag.GetHashCode();
                hash = hash * 31 + Science.GetHashCode();
                hash = hash * 31 + Culture.GetHashCode();
                hash = hash * 31 + Income.GetHashCode();
                return hash;
            }
        }

        public override bool Equals(object obj) {
            if (base.Equals(obj)) {
                ShipHullStat oStat = (ShipHullStat)obj;
                return oStat.HullCategory == HullCategory && oStat.Drag == Drag && oStat.Science == Science && oStat.Culture == Culture
                    && oStat.Income == Income;
            }
            return false;
        }

        #endregion


    }
}

