// --------------------------------------------------------------------------------------------------------------------
// <copyright>
// Copyright © 2012 - 2015 Strategic Forge
//
// Email: jim@strategicforge.com
// </copyright> 
// <summary> 
// File: ShipHullStat.cs
// Immutable stat containing externally acquirable hull values for Ships.
// </summary> 
// -------------------------------------------------------------------------------------------------------------------- 

////#define DEBUG_LOG
////#define DEBUG_WARN
////#define DEBUG_ERROR

namespace CodeEnv.Master.GameContent {

    using CodeEnv.Master.Common;
    using UnityEngine;

    /// <summary>
    /// Immutable stat containing externally acquirable hull values for Ships.
    /// </summary>
    public class ShipHullStat : AHullStat {

        public ShipHullCategory HullCategory { get; private set; }

        /// <summary>
        /// The drag of this hull in Topography.OpenSpace.
        /// </summary>
        public float Drag { get; private set; }
        public float Income { get; private set; }
        public float Science { get; private set; }
        public float Culture { get; private set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShipHullStat" /> class.
        /// </summary>
        /// <param name="hullCategory">The category.</param>
        /// <param name="imageAtlasID">The image atlas identifier.</param>
        /// <param name="imageFilename">The image filename.</param>
        /// <param name="description">The description.</param>
        /// <param name="id">The identifier.</param>
        /// <param name="size">The size.</param>
        /// <param name="mass">The mass.</param>
        /// <param name="drag">The drag of this hull in Topography.OpenSpace.</param>
        /// <param name="pwrRqmt">The PWR RQMT.</param>
        /// <param name="hitPts">The hit points contributed to the survivability of the item.</param>
        /// <param name="constructionCost">The cost in production units to produce this equipment.</param>
        /// <param name="expense">The expense.</param>
        /// <param name="damageMitigation">The damage mitigation.</param>
        /// <param name="hullDimensions">The hull dimensions.</param>
        /// <param name="science">The science generated by this hull, if any.</param>
        /// <param name="culture">The culture generated by this hull, if any.</param>
        /// <param name="income">The income generated by this hull, if any.</param>
        public ShipHullStat(ShipHullCategory hullCategory, AtlasID imageAtlasID, string imageFilename, string description,
            EquipStatID id, float size, float mass, float drag, float pwrRqmt, float hitPts, float constructionCost,
            float expense, DamageStrength damageMitigation, Vector3 hullDimensions, float science, float culture,
            float income)
            : base(hullCategory.GetValueName(), imageAtlasID, imageFilename, description, id, size, mass, pwrRqmt, hitPts,
                  constructionCost, expense, damageMitigation, hullDimensions) {
            HullCategory = hullCategory;
            Drag = drag;
            Science = science;
            Culture = culture;
            Income = income;
        }


        #region Value-based Equality Archive
        // 2.23.18 ATechStat instances are always the same as they are acquired via factory caching

        ////public static bool operator ==(ShipHullStat left, ShipHullStat right) {
        ////    // https://msdn.microsoft.com/en-us/library/ms173147(v=vs.90).aspx
        ////    if (ReferenceEquals(left, right)) { return true; }
        ////    if (((object)left == null) || ((object)right == null)) { return false; }
        ////    return left.Equals(right);
        ////}

        ////public static bool operator !=(ShipHullStat left, ShipHullStat right) {
        ////    return !(left == right);
        ////}

        ////public override int GetHashCode() {
        ////    unchecked {
        ////        int hash = base.GetHashCode();
        ////        hash = hash * 31 + HullCategory.GetHashCode(); // 31 = another prime number
        ////        hash = hash * 31 + Drag.GetHashCode();
        ////        hash = hash * 31 + Science.GetHashCode();
        ////        hash = hash * 31 + Culture.GetHashCode();
        ////        hash = hash * 31 + Income.GetHashCode();
        ////        return hash;
        ////    }
        ////}

        ////public override bool Equals(object obj) {
        ////    if (base.Equals(obj)) {
        ////        ShipHullStat oStat = (ShipHullStat)obj;
        ////        return oStat.HullCategory == HullCategory && oStat.Drag == Drag && oStat.Science == Science && oStat.Culture == Culture
        ////            && oStat.Income == Income;
        ////    }
        ////    return false;
        ////}

        #endregion

    }
}

