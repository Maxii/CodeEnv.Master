// --------------------------------------------------------------------------------------------------------------------
// <copyright>
// Copyright © 2012 - 2015 Strategic Forge
//
// Email: jim@strategicforge.com
// </copyright> 
// <summary> 
// File: FacilityHullStat.cs
// Immutable stat containing externally acquirable hull values for Facilities.
// </summary> 
// -------------------------------------------------------------------------------------------------------------------- 

////#define DEBUG_LOG
////#define DEBUG_WARN
////#define DEBUG_ERROR

namespace CodeEnv.Master.GameContent {

    using CodeEnv.Master.Common;
    using UnityEngine;

    /// <summary>
    /// Immutable stat containing externally acquirable hull values for Facilities.
    /// <remarks>Implements value-based Equality and HashCode.</remarks>
    /// </summary>
    public class FacilityHullStat : AHullStat {

        #region Comparison Operators Override

        // see C# 4.0 In a Nutshell, page 254

        public static bool operator ==(FacilityHullStat left, FacilityHullStat right) {
            // https://msdn.microsoft.com/en-us/library/ms173147(v=vs.90).aspx
            if (ReferenceEquals(left, right)) { return true; }
            if (((object)left == null) || ((object)right == null)) { return false; }
            return left.Equals(right);
        }

        public static bool operator !=(FacilityHullStat left, FacilityHullStat right) {
            return !(left == right);
        }

        #endregion

        public FacilityHullCategory HullCategory { get; private set; }
        public float Science { get; private set; }
        public float Culture { get; private set; }
        public decimal Income { get; private set; }
        public float Production { get; private set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FacilityHullStat" /> class.
        /// </summary>
        /// <param name="hullCategory">The hull category.</param>
        /// <param name="imageAtlasID">The image atlas identifier.</param>
        /// <param name="imageFilename">The image filename.</param>
        /// <param name="description">The description.</param>
        /// <param name="size">The size.</param>
        /// <param name="mass">The mass.</param>
        /// <param name="pwrRqmt">The PWR RQMT.</param>
        /// <param name="constructionCost">The production cost.</param>
        /// <param name="expense">The expense.</param>
        /// <param name="maxHitPts">The maximum hit PTS.</param>
        /// <param name="damageMitigation">The damage mitigation.</param>
        /// <param name="hullDimensions">The hull dimensions.</param>
        /// <param name="science">The science generated by this hull, if any.</param>
        /// <param name="culture">The culture generated by this hull, if any.</param>
        /// <param name="income">The income generated by this hull, if any.</param>
        /// <param name="production">The production generated by this hull, if any.</param>
        public FacilityHullStat(FacilityHullCategory hullCategory, AtlasID imageAtlasID, string imageFilename, string description,
            float size, float mass, float pwrRqmt, float constructionCost, decimal expense, float maxHitPts, DamageStrength damageMitigation,
            Vector3 hullDimensions, float science, float culture, decimal income, float production)
            : base(hullCategory.GetValueName(), imageAtlasID, imageFilename, description, size, mass, pwrRqmt, constructionCost, expense,
                  maxHitPts, damageMitigation, hullDimensions) {
            HullCategory = hullCategory;
            Science = science;
            Culture = culture;
            Income = income;
            Production = production;
        }

        #region Object.Equals and GetHashCode Override

        public override int GetHashCode() {
            unchecked {
                int hash = base.GetHashCode();
                hash = hash * 31 + HullCategory.GetHashCode(); // 31 = another prime number
                hash = hash * 31 + Science.GetHashCode();
                hash = hash * 31 + Culture.GetHashCode();
                hash = hash * 31 + Income.GetHashCode();
                hash = hash * 31 + Production.GetHashCode();
                return hash;
            }
        }

        public override bool Equals(object obj) {
            if (base.Equals(obj)) {
                FacilityHullStat oStat = (FacilityHullStat)obj;
                return oStat.HullCategory == HullCategory && oStat.Science == Science && oStat.Culture == Culture
                    && oStat.Income == Income && oStat.Production == Production;
            }
            return false;
        }

        #endregion


    }
}

