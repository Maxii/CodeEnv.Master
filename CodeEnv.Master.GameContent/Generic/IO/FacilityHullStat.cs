// --------------------------------------------------------------------------------------------------------------------
// <copyright>
// Copyright © 2012 - 2015 Strategic Forge
//
// Email: jim@strategicforge.com
// </copyright> 
// <summary> 
// File: FacilityHullStat.cs
// Immutable stat containing externally acquirable hull values for Facilities.
// </summary> 
// -------------------------------------------------------------------------------------------------------------------- 

////#define DEBUG_LOG
////#define DEBUG_WARN
////#define DEBUG_ERROR

namespace CodeEnv.Master.GameContent {

    using CodeEnv.Master.Common;
    using CodeEnv.Master.Common.LocalResources;
    using System;
    using UnityEngine;

    /// <summary>
    /// Immutable stat containing externally acquirable hull values for Facilities.
    /// </summary>
    public class FacilityHullStat : AHullStat {

        public override Vector3 HullDimensions { get { return HullCategory.Dimensions(); } }

        public FacilityHullCategory HullCategory { get; private set; }
        public float Science { get; private set; }
        public float Culture { get; private set; }
        public float Income { get; private set; }
        public float Food { get; private set; }
        public float Production { get; private set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FacilityHullStat" /> class.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="imageAtlasID">The image atlas identifier.</param>
        /// <param name="imageFilename">The image filename.</param>
        /// <param name="description">The description.</param>
        /// <param name="id">The identifier.</param>
        /// <param name="size">The size.</param>
        /// <param name="mass">The mass.</param>
        /// <param name="pwrRqmt">The PWR RQMT.</param>
        /// <param name="hitPts">The hit points contributed to the survivability of the item.</param>
        /// <param name="constructionCost">The cost in production units to produce this equipment.</param>
        /// <param name="expense">The expense.</param>
        /// <param name="damageMitigation">The damage mitigation.</param>
        /// <param name="hqPriority">The HQ priority.</param>
        /// <param name="science">The science generated by this hull, if any.</param>
        /// <param name="culture">The culture generated by this hull, if any.</param>
        /// <param name="income">The income generated by this hull, if any.</param>
        /// <param name="food">The food generated by this hull, if any.</param>
        /// <param name="production">The production generated by this hull, if any.</param>
        public FacilityHullStat(string name, AtlasID imageAtlasID, string imageFilename, string description, EquipmentStatID id, float size,
            float mass, float pwrRqmt, float hitPts, float constructionCost, float expense, DamageStrength damageMitigation,
            Priority hqPriority, float science, float culture, float income, float food, float production)
            : base(name, imageAtlasID, imageFilename, description, id, size, mass, pwrRqmt, hitPts, constructionCost, expense,
                  damageMitigation, hqPriority) {
            HullCategory = id.Category.FacilityHullCat();
            Science = science;
            Culture = culture;
            Income = income;
            Food = food;
            Production = production;
        }

        #region Value-based Equality Archive
        // 2.23.18 ATechStat instances are always the same as they are acquired via factory caching

        ////public static bool operator ==(FacilityHullStat left, FacilityHullStat right) {
        ////    // https://msdn.microsoft.com/en-us/library/ms173147(v=vs.90).aspx
        ////    if (ReferenceEquals(left, right)) { return true; }
        ////    if (((object)left == null) || ((object)right == null)) { return false; }
        ////    return left.Equals(right);
        ////}

        ////public static bool operator !=(FacilityHullStat left, FacilityHullStat right) {
        ////    return !(left == right);
        ////}

        ////public override int GetHashCode() {
        ////    unchecked {
        ////        int hash = base.GetHashCode();
        ////        hash = hash * 31 + HullCategory.GetHashCode(); // 31 = another prime number
        ////        hash = hash * 31 + Science.GetHashCode();
        ////        hash = hash * 31 + Culture.GetHashCode();
        ////        hash = hash * 31 + Income.GetHashCode();
        ////        hash = hash * 31 + Food.GetHashCode();
        ////        hash = hash * 31 + Production.GetHashCode();
        ////        return hash;
        ////    }
        ////}

        ////public override bool Equals(object obj) {
        ////    if (base.Equals(obj)) {
        ////        FacilityHullStat oStat = (FacilityHullStat)obj;
        ////        return oStat.HullCategory == HullCategory && oStat.Science == Science && oStat.Culture == Culture
        ////            && oStat.Income == Income && oStat.Food == Food && oStat.Production == Production;
        ////    }
        ////    return false;
        ////}

        #endregion


    }
}

